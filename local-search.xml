<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++中的内存管理</title>
    <link href="/2025/06/07/memory/"/>
    <url>/2025/06/07/memory/</url>
    
    <content type="html"><![CDATA[<h2 id="内存的分类"><a href="#内存的分类" class="headerlink" title="内存的分类"></a>内存的分类</h2><h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><p>栈内存是由<strong>编译器自动管理</strong>的内存区域，用于存储局部变量、函数参数和返回地址等。栈内存的分配和释放是自动进行的：</p><ul><li>当函数被调用时，局部变量和参数会被压入栈中</li><li>当函数返回时，这些局部变量和参数会被弹出栈并释放。<br>栈内存的大小固定，一般为8M左右，无法动态调整。作用域一般是函数内部，函数返回时会自动释放。</li></ul><p>分配速度快。</p><h4 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h4><p>栈溢出最典型的情况就是无限递归调用导致溢出，例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">1000</span>];<br>    <span class="hljs-built_in">func</span>(); <span class="hljs-comment">// 无限递归调用</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="返回地址"><a href="#返回地址" class="headerlink" title="返回地址"></a>返回地址</h4><p>在函数调用过程中，当前函数执行完成后应返回调用者的位置，这个位置称之为返回地址。</p><h4 id="栈攻击"><a href="#栈攻击" class="headerlink" title="栈攻击"></a>栈攻击</h4><ol><li>返回地址重写<br>攻击者向固定大小的缓冲区写入超长的数据，覆盖返回地址，使程序跳转到恶意代码</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">vulnerable</span><span class="hljs-params">(<span class="hljs-type">char</span> *input)</span> </span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>];<br>    <span class="hljs-built_in">strcpy</span>(buf, input); <span class="hljs-comment">// 无边界检查,如果输入超过16字节，就可能覆盖返回地址，跳转到攻击者布置的shellcode。</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li></li></ol><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p>堆内存是由程序员手动管理的内存区域。大小不固定，可以动态调整，但任意出现内存泄露等问题。</p><p>作用域由程序员控制，只要不释放内存就一直存在。</p><p>分配速度较慢。</p><h2 id="变量和存储区"><a href="#变量和存储区" class="headerlink" title="变量和存储区"></a>变量和存储区</h2><img src="/2025/06/07/memory/memory.jpg" class="" title="C++的内存分区"><p>c++程序的内存分为4个区域</p><ul><li><strong>代码段</strong> 存储代码的指令，只读</li><li><strong>数据段</strong><br>存储<strong>全局变量</strong>和<strong>静态变量</strong>，分为 <ul><li><p>已初始化的数据区<br>进一步分为</p><ul><li>已初始化的只读区域<br>存储<code>const</code>修饰的全局变量、常量字符串等，例如<code>char* str = &quot;hello world&quot;</code>这行代码中<code>string</code>存储在已初始化的只读区域，<code>str</code>放在已初始化的读写区域</li><li>已初始化的读写区域</li></ul></li><li><p>未初始化的数据区（Block Started by Symbol，BSS）<br>存储未初始化或初始化为0的全局变量和静态变量</p></li></ul></li><li><strong>堆区</strong></li><li><strong>栈区</strong></li></ul><h2 id="堆内存的使用"><a href="#堆内存的使用" class="headerlink" title="堆内存的使用"></a>堆内存的使用</h2><ul><li><a href="https://en.cppreference.com/w/cpp/memory/c/malloc">std::malloc</a><br>用于在堆上分配指定大小的内存块  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> * <span class="hljs-title">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>; <br></code></pre></td></tr></table></figure>返回指向分配的内存的指针，若分配失败，则返回<code>nullptr</code></li><li><code>calloc</code><br>分配内存并初始化   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> * <span class="hljs-title">calloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> num, <span class="hljs-type">size_t</span> size)</span></span>; <br></code></pre></td></tr></table></figure><ul><li><code>num</code>要分配的元素的个数</li><li><code>size</code>元素的大小（字节数）</li></ul></li><li><code>realloc</code><br>调整已分配的内存块的大小   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> * <span class="hljs-title">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr, <span class="hljs-type">size_t</span> size)</span></span>; <br></code></pre></td></tr></table></figure><ul><li><code>ptr</code>要调整的内存块的指针</li><li><code>size</code>新的内存块大小（字节数）</li><li>返回指向新的内存块的指针，若分配失败，返回<code>nullptr</code>，原来的内存块（<code>ptr</code>）保持原样。<ul><li><p>分配失败可能会导致内存泄露</p><blockquote><p>If there is not enough memory, the old memory block is not freed and null pointer is returned.——<a href="https://en.cppreference.com/w/c/memory/realloc">cppreference</a></p></blockquote><p>需要手动处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">        <span class="hljs-type">int</span>* ptr = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>`(<span class="hljs-type">int</span>) * <span class="hljs-number">10</span>);​<br><span class="hljs-keyword">if</span> (ptr == <span class="hljs-literal">NULL</span>) &#123;​<br>    <span class="hljs-comment">// 处理内存分配失败​</span><br>    <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 或采取其他错误处理​</span><br>&#125;​<br>​<br><span class="hljs-comment">// 使用临时指针保存realloc结果​</span><br><span class="hljs-type">int</span>* temp = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(ptr, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">20</span>);​<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>) &#123;​<br>    <span class="hljs-comment">// realloc失败：原始内存仍可通过ptr访问​</span><br>    <span class="hljs-built_in">free</span>(ptr);   <span class="hljs-comment">// 释放原始内存（可选）​</span><br>    ptr = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 避免悬空指针​</span><br>    <span class="hljs-comment">// 处理错误（例如退出或降级使用）​</span><br>&#125; <span class="hljs-keyword">else</span> &#123;​<br>    ptr = temp; <span class="hljs-comment">// realloc成功，更新ptr​</span><br>    <span class="hljs-comment">// 现在ptr指向20个int的内存​</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><code>free</code><br>释放通过<code>malloc</code>,<code>calloc</code>和<code>realloc</code>分配的内存空间  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="为什么malloc时候需要传递长度信息，而free时候却不需要传递长度信息呢"><a href="#为什么malloc时候需要传递长度信息，而free时候却不需要传递长度信息呢" class="headerlink" title="为什么malloc时候需要传递长度信息，而free时候却不需要传递长度信息呢?"></a>为什么malloc时候需要传递长度信息，而free时候却不需要传递长度信息呢?</h3><p>因为<code>malloc(size)</code>在分配内存时，除了会分配一部分大小为<code>size</code>的内存供程序员使用外，还会在这部分内存头部添加这块内存的元数据，例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">mem_control_block</span> &#123;<br>  <span class="hljs-type">int</span> is_available; <br>  <span class="hljs-type">int</span> size;        <br>&#125;;<br></code></pre></td></tr></table></figure><p>这样<code>free</code>这块内存的时候就可以访问这块区域进而获取需要free的内存大小。</p><h3 id="malloc的底层实现"><a href="#malloc的底层实现" class="headerlink" title="malloc的底层实现"></a>malloc的底层实现</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>algorithm_graph</title>
    <link href="/2025/06/06/algorithm-graph/"/>
    <url>/2025/06/06/algorithm-graph/</url>
    
    <content type="html"><![CDATA[<h2 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2><ul><li>顶点</li><li>边</li><li>度 degree<br>一个顶点在图中的度为与该顶点相连的边的数目</li></ul><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>$$\operatorname{arc}[i][j]&#x3D;\left{\begin{array}{l}<br>1, \text { 若 }\left(v_i, v_j\right) \in E \text { 或 }\left\langle v_i, v_j\right\rangle \in E \<br>0, \text { 反之 }<br>\end{array}\right.<br>$$</p><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++中指针的理解</title>
    <link href="/2025/06/06/cpp-pointer/"/>
    <url>/2025/06/06/cpp-pointer/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>指针本质上也是一种变量，不过它存储的是对应变量类型的地址。</p><h3 id="为什么要有指针"><a href="#为什么要有指针" class="headerlink" title="为什么要有指针"></a>为什么要有指针</h3><!-- 笔者在学习指针时，一直有一个疑惑，那就是变量本身就包含地址，那为什么还需要指针呢？想来如果解释了这个问题，就解释了指针在C++中发挥的作用。* 首先, 我们拿到地址后，我们可以用地址做什么？  * 修改这个地址对应内存的值  似乎有些脱裤子放屁了，用变量本身就可以做到  * 对于一些很大的变量（类和结构体），值传递会有很大的复制开销，我们可以通过传递地址来减少这部分开销。  * 我们可以通过地址，访问邻近的变量*  --><p>之所以要有指针，是因为虽然变量本身就包含了地址的信息（不然我们也没法通过<code>&amp;</code>来取址），但变量和其地址之间的关系是一一对应的且无法修改的，无法满足我们对地址本身进行处理的需求。例如如果我们要实现数组的数据结构，将数据放入连续的内存中，那么我们需要解决下面的问题</p><ol><li>这块连续内存的起始地址是什么？</li><li>访问数组中的某个元素时，我们该如何确定它的地址？<br>假如这个元素的索引是<code>i</code>，数组中的元素大小都是<code>T</code>，那么我们访问它的时候就需要通过<code>首地址+i*T</code>来获取它的地址。</li></ol><p>那么问题来了，地址本身是个整型数据，为什么我们不直接使用<code>int</code>等整型类型来存储和操作呢？</p><ul><li>首先，需要维护一个额外的变量来告诉我们这个地址对应的变量大小，否则我们没法对这个地址取值，也没办法进行前面提到的数组寻址操作</li><li>其次，这样写的代码可读性很差</li><li>再者，不同平台的地址大小不同，如果我们在32位系统中使用<code>int</code>来存储地址，那么这部分代码就无法在64位的系统中运行<br>因此，定义一种新的变量来存储和操作地址是很有必要的。</li></ul><h3 id="指针的基本操作"><a href="#指针的基本操作" class="headerlink" title="指针的基本操作"></a>指针的基本操作</h3><ul><li>赋值和初始化  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* p = &amp;a; <br></code></pre></td></tr></table></figure></li><li>解引用<br>指针通过<code>*</code>操作符获取指向的内存中存储的值，值的类型由指针的类型确定</li><li>指针运算<ul><li>加减运算<ul><li><code>T*</code>类型的指针<code>p + i</code>相当于<code>p</code>向前移动了<code>i * sizeof(T)</code>个字节</li><li>支持<code>++</code>和<code>--</code></li></ul></li><li>比较运算<br>比较两个指针的值，也就是比较两个地址是否相同</li></ul></li></ul><h2 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h2><p>数组名本质是指向数组首地址的、<strong>不可修改</strong>的常量指针。在作为函数参数时，它会退化为指向数组首元素的指针，这时候可以对它进行自增等运算。</p><ul><li><code>int (*p)[10]</code>表示这是一个指向长度为10的<code>int</code>数组的指针，其类型为<code>int (*)[]</code>。也就是说<code>p++</code>会令<code>p</code>向前移动40个字节</li><li><code>int *p[10]</code>表示这是一个包含了10个<code>int*</code>变量的数组。作为函数参数退化为指针后，它的类型是<code>int**</code></li></ul><h3 id="指针与动态数组"><a href="#指针与动态数组" class="headerlink" title="指针与动态数组"></a>指针与动态数组</h3><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>每个函数都有一个唯一的入口地址，函数指针存储的就是这个地址。</p><h3 id="定义与使用"><a href="#定义与使用" class="headerlink" title="定义与使用"></a>定义与使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">返回类型 (*指针名)(函数参数列表);<br><span class="hljs-built_in">int</span> (*funcPtr)(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>);<br></code></pre></td></tr></table></figure><h3 id="回调函数与高阶函数"><a href="#回调函数与高阶函数" class="headerlink" title="回调函数与高阶函数"></a>回调函数与高阶函数</h3><h2 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h2><h2 id="指针与内存管理"><a href="#指针与内存管理" class="headerlink" title="指针与内存管理"></a>指针与内存管理</h2><p><a href="https://lb3fn675fh.feishu.cn/wiki/OVsewICczis2jlkKBgKc3Mz9n8d">https://lb3fn675fh.feishu.cn/wiki/OVsewICczis2jlkKBgKc3Mz9n8d</a></p><h2 id="指针与高级数据类型"><a href="#指针与高级数据类型" class="headerlink" title="指针与高级数据类型"></a>指针与高级数据类型</h2><p><a href="https://lb3fn675fh.feishu.cn/wiki/QlEJwXrH4i9MxPkS1OncaPX4nze">https://lb3fn675fh.feishu.cn/wiki/QlEJwXrH4i9MxPkS1OncaPX4nze</a></p><h2 id="指针与常量"><a href="#指针与常量" class="headerlink" title="指针与常量"></a>指针与常量</h2><p><a href="https://lb3fn675fh.feishu.cn/wiki/WcSrwytf5ivjkQkWd86cEJnxnph">https://lb3fn675fh.feishu.cn/wiki/WcSrwytf5ivjkQkWd86cEJnxnph</a></p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>避免野指针：始终确保指针在使用前已经正确初始化，并且在不再需要时将其设置为<code>nullptr</code>。</li><li>避免内存泄漏：动态分配的内存在使用完毕后一定要使用<code>free</code>释放。</li><li>有效性检查：在解引用前检查它是否是<code>nullptr</code>。</li><li>使用智能指针：C++11引入的智能指针可以自动管理内存，减少内存泄露的风险。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++的标准输入输出</title>
    <link href="/2025/06/05/cpp_io/"/>
    <url>/2025/06/05/cpp_io/</url>
    
    <content type="html"><![CDATA[<ul><li><code>std::cout</code>  和  <code>std::cerr</code>  都是 <code>ostream</code>  类型的对象。</li><li><code>std::cin</code><ul><li><code>&gt;&gt;</code>指向<code>std::string</code>类型时读取一行文本</li><li>会忽略空白字符（如空格、制表符、换行符）</li><li>成员函数fail()用于判断输入流是否出错<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++">    <span class="hljs-type">int</span> num;<br>    <br>    std::cin &gt;&gt; num;<br>    <br>    <span class="hljs-keyword">if</span> (std::cin.<span class="hljs-built_in">fail</span>()) &#123;<br>    <br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Error: invalid input&quot;</span> &lt;&lt; std::endl;<br>        std::cin.<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">// 清除错误状态</span><br>        std::cin.<span class="hljs-built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="hljs-built_in">max</span>(), <span class="hljs-string">&#x27;\n&#x27;</span>); <span class="hljs-comment">// 忽略错误的输入</span><br>    &#125; <br>  - 可以通过`stringstream`实现格式化输入<br>    ```C++<br>    std::string input;<br>    <br>    std::cin &gt;&gt; input;<br>    <br>    <span class="hljs-function">std::stringstream <span class="hljs-title">ss</span><span class="hljs-params">(input)</span></span>;<br>    <br>    <span class="hljs-type">int</span> a, b;<br>    <br>    ss &gt;&gt; a &gt;&gt; b;<br>- `std::cout`<br>  - `&lt;&lt; std::endl`在添加换行符的同时会刷新输出缓冲区<br>  - 支持格式化输出<br>      ```C++<br>      std::cout &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">10</span>) &lt;&lt; std::left &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; <span class="hljs-string">&quot;John Doe&quot;</span> &lt;&lt; std::endl;<br><br>      std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-string">&quot;Pi: &quot;</span> &lt;&lt; pi &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><ul><li><code>std::setw(n) </code><br>设置下一个字段的最小宽度为n， 如果实际字符串长度小于 n，会在不足的部分自动填充空格；如果实际字符串长度超过 n，则会按实际长度输出，不会截断。</li><li><code>std::left</code><br>设置接下来的字段左对齐（默认是右对齐）</li><li><code>std::fixed</code><br>设置浮点数的输出格式为小数点格式</li><li><code>std::setprecision(n)</code><br>设置后续浮点数输出时保留的小数位数</li></ul></li><li>通常会缓冲输出，直到缓冲区满了或者显式地调用  <code>flush</code>  函数。<br>可以在输出后调用  <code>std::cout.flush()</code>  来立即刷新缓冲区。</li></ul></li><li><code>std::cerr</code> 标准错误输出<ul><li>通常不缓冲输出</li><li>通常不格式化</li></ul></li><li><code>std::clog</code> 输出日志信息<ul><li>通常使用输出缓存</li><li>支持格式化输出</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
